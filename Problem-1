// Time Complexity: O(nlogk)
// Space Complexity: O(k)

// Add elements from the array to a min heap
// if at any point the size of heap exceeds k, then remove the root of the heap
// return the root of the heap in the end

class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int num : nums) {
            minHeap.add(num);
            if(minHeap.size() > k)
                minHeap.poll();
        }
        return minHeap.poll();
    }
}